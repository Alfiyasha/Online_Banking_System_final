//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Online_Banking_System.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;

    public partial class BankSystemEntities : DbContext
    {
        public BankSystemEntities()
            : base("name=BankSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
    
        public virtual int ADD_TRANSACTION_RECORD(string username, string accNumber, Nullable<double> amount)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var accNumberParameter = accNumber != null ?
                new ObjectParameter("AccNumber", accNumber) :
                new ObjectParameter("AccNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_TRANSACTION_RECORD", usernameParameter, accNumberParameter, amountParameter);
        }

        public IEnumerable<View_Transaction_Result> View_Transaction(object username)
        {
            throw new NotImplementedException();
        }

        public virtual int INSERT_INTO_BANK_TABLES(string name, Nullable<System.DateTime> dob, string phone, string email, string address, string username, string password, string accType)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var accTypeParameter = accType != null ?
                new ObjectParameter("accType", accType) :
                new ObjectParameter("accType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_INTO_BANK_TABLES", nameParameter, dobParameter, phoneParameter, emailParameter, addressParameter, usernameParameter, passwordParameter, accTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UPDATE_TRANSACTION(string username, string accNumber, string accHolder, Nullable<double> amount, ObjectParameter text)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var accNumberParameter = accNumber != null ?
                new ObjectParameter("AccNumber", accNumber) :
                new ObjectParameter("AccNumber", typeof(string));
    
            var accHolderParameter = accHolder != null ?
                new ObjectParameter("AccHolder", accHolder) :
                new ObjectParameter("AccHolder", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UPDATE_TRANSACTION", usernameParameter, accNumberParameter, accHolderParameter, amountParameter, text);
        }
    
        public virtual ObjectResult<Nullable<float>> GET_BALANCE(Nullable<int> custId)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("CustId", custId) :
                new ObjectParameter("CustId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<float>>("GET_BALANCE", custIdParameter);
        }
    
        public virtual ObjectResult<View_Transaction_Result> View_Transaction(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_Transaction_Result>("View_Transaction", usernameParameter);
        }
    }
}
